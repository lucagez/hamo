const every=(e=[],...t)=>{const{length:u}=e;for(let n=0;n<u;n++)e[n](...t)};function on(e,t){this.queues[e]=[...this.queues[e]||[],t],this.handler=this.build()}function off(e){this.queues[e]=void 0,this.handler=this.build()}function build(){const{before:e,oncebefore:t,after:u,onceafter:n}=this.queues,s=t||e||u||n;let r="";return t&&(r+="this.every(this.queues.oncebefore, ...arguments);",r+="this.queues.oncebefore = undefined;"),e&&(r+="this.every(this.queues.before, ...arguments);"),s&&(r+="const result = this.func(...arguments);"),(u||n)&&(r+="Promise.resolve().then(() => {",n&&(r+="this.every(this.queues.onceafter, result, ...arguments);",r+="this.queues.onceafter = undefined;"),u&&(r+="this.every(this.queues.after, result, ...arguments);"),r+="});"),s&&(r+="return result;"),r.length>0?new Function(r):this.func}const hamo=e=>{const t={queues:{},func:e,handler:e,build:build,every:every};return[function(...e){return t.handler(...e)},on.bind(t),off.bind(t)]};module.exports=hamo;
