const every=(e=[],...t)=>{const{length:s}=e;for(let u=0;u<s;u++)e[u](...t)};function on(e,t){this.queues[e]=[...this.queues[e]||[],t],this.handler=this.build()}function off(e){this.queues[e]=void 0,this.handler=this.build()}function build(){const{before:e,oncebefore:t,after:s,onceafter:u}=this.queues,n=t||e||s||u;let r="";return t&&(r+="this.every(this.queues.oncebefore, ...arguments);",r+="this.queues.oncebefore = undefined;"),e&&(r+="this.every(this.queues.before, ...arguments);"),n&&(r+="const result = this.func(...arguments);"),(s||u)&&(r+="Promise.resolve().then(() => {",u&&(r+="this.every(this.queues.onceafter, result, ...arguments);",r+="this.queues.onceafter = undefined;"),s&&(r+="this.every(this.queues.after, result, ...arguments);"),r+="});"),n&&(r+="return result;"),r.length>0?new Function(r):this.func}const hamo=e=>{const t={queues:{},func:e,handler:e,build:build,every:every};return[(...e)=>t.handler(...e),on.bind(t),off.bind(t)]};module.exports=hamo;
